# --- START OF FILE handlers/message_handlers.py ---
import datetime
import pytz
import time
import os
import PIL.Image # <--- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
from io import BytesIO
from typing import Optional, List, Union, Dict, Any
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from telebot.util import smart_split
import asyncio
import re

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config.settings import (
    STATE_WAITING_FOR_TRANSLATE_TEXT, STATE_WAITING_FOR_SUMMARIZE_INPUT,
    STATE_WAITING_FOR_INCOME_SKILLS, STATE_WAITING_FOR_INCOME_TERM,
    STATE_WAITING_FOR_INCOME_RESOURCES, STATE_WAITING_FOR_INCOME_INTERESTS,
    STATE_WAITING_FOR_REMINDER_TEXT, STATE_WAITING_FOR_REMINDER_DATE, STATE_WAITING_FOR_REMINDER_TIME,
    STATE_WAITING_FOR_TIMEZONE,
    STATE_WAITING_FOR_HISTORY_DATE,
    MAX_SUMMARIZE_CHARS, BOT_STYLES, LANGUAGE_FLAGS
)
from database import db_manager
from services import gemini_service
from features import personal_account, reminders
from utils import markup_helpers as mk
from utils import text_helpers, file_helpers, web_helpers
from logger_config import get_logger
from .command_handlers import user_states, send_message, reply_to_message
from .callback_handlers import answer_callback_query, edit_message_text, edit_message_reply_markup

try:
    from timezonefinder import TimezoneFinder # type: ignore
    tf = TimezoneFinder()
    def find_timezone_at(lat: float, lng: float) -> Optional[str]:
        return tf.timezone_at(lng=lng, lat=lat)
except ImportError:
    logger = get_logger(__name__)
    logger.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'timezonefinder' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install timezonefinder[numba]")
    def find_timezone_at(lat: float, lng: float) -> Optional[str]:
        return None

logger = get_logger(__name__)
user_logger = get_logger('user_messages')

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def send_typing_action(bot: AsyncTeleBot, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ 'typing'."""
    try:
        await bot.send_chat_action(chat_id, 'typing')
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing action –≤ —á–∞—Ç {chat_id}: {e}", extra={'user_id': str(chat_id)})

async def send_error_reply(bot: AsyncTeleBot, message: types.Message, log_message: str, user_message: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ."""
    logger.error(log_message, exc_info=True, extra={'user_id': str(message.chat.id)})
    error_report_markup = mk.create_error_report_button()
    try:
        await reply_to_message(bot, message, user_message, reply_markup=error_report_markup, parse_mode='None')
    except Exception as send_err:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}: {send_err}", extra={'user_id': str(message.chat.id)})

def log_user_message_info(message: types.Message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.chat.id
    user_info = f"User ID: {user_id}"
    if message.from_user:
        if message.from_user.first_name: user_info += f", –ò–º—è: {message.from_user.first_name}"
        if message.from_user.last_name: user_info += f", –§–∞–º–∏–ª–∏—è: {message.from_user.last_name}"
        if message.from_user.username: user_info += f", Username: @{message.from_user.username}"

    content_type = message.content_type
    log_text = f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ({content_type}) –æ—Ç {user_info}"

    if content_type == 'text':
        log_text += f". –¢–µ–∫—Å—Ç: '{message.text[:100]}{'...' if len(message.text) > 100 else ''}'"
    elif content_type == 'photo':
        photo_info = f"Photo ID: {message.photo[-1].file_id}"
        if message.caption:
             photo_info += f", Caption: '{message.caption[:50]}{'...' if len(message.caption) > 50 else ''}'"
        else:
             photo_info += ", No caption"
        log_text += f". {photo_info}"
    elif content_type == 'document':
        doc = message.document
        doc_info = f"Doc: {doc.file_name}, Size: {doc.file_size} bytes, MIME: {doc.mime_type}, ID: {doc.file_id}"
        log_text += f". {doc_info}"
    elif content_type == 'location':
        loc = message.location
        loc_info = f"Location: lat={loc.latitude}, lon={loc.longitude}"
        log_text += f". {loc_info}"

    user_logger.info(log_text, extra={'user_id': str(user_id)})

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def handle_any_message(message: types.Message, bot: AsyncTeleBot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.)."""
    user_id = message.chat.id
    content_type = message.content_type

    log_user_message_info(message)
    db_manager.add_or_update_user(user_id)
    current_state = user_states.get(user_id)
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id {user_id}. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}. –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}", extra={'user_id': str(user_id)})

    try:
        if content_type == 'text':
            await handle_text_message(bot, message, current_state)
        elif content_type == 'photo':
            if current_state in [STATE_WAITING_FOR_TRANSLATE_TEXT, STATE_WAITING_FOR_INCOME_SKILLS,
                                STATE_WAITING_FOR_INCOME_TERM, STATE_WAITING_FOR_INCOME_RESOURCES,
                                STATE_WAITING_FOR_INCOME_INTERESTS, STATE_WAITING_FOR_REMINDER_TEXT,
                                STATE_WAITING_FOR_REMINDER_TIME, STATE_WAITING_FOR_TIMEZONE,
                                STATE_WAITING_FOR_HISTORY_DATE]:
                  await reply_to_message(bot, message, "–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ (—Ç–µ–∫—Å—Ç, –¥–∞—Ç—É –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /reset.", reply_markup=mk.create_main_keyboard())
            else:
                  await handle_photo_message(bot, message)
        elif content_type == 'document':
            if current_state == STATE_WAITING_FOR_SUMMARIZE_INPUT:
                await handle_document_message(bot, message)
            else:
                await reply_to_message(bot, message, "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ò–∑–ª–æ–∂–∏—Ç—å' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /summarize.", reply_markup=mk.create_main_keyboard())
        elif content_type == 'location':
             if current_state == STATE_WAITING_FOR_TIMEZONE:
                 await handle_state_timezone_location(bot, message)
             else:
                  logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –æ—Ç {user_id} –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∞–π–º–∑–æ–Ω—ã.", extra={'user_id': str(user_id)})
        else:
             logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ '{content_type}' –æ—Ç user_id {user_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.", extra={'user_id': str(user_id)})

    except Exception as e:
        await send_error_reply(bot, message, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_any_message –¥–ª—è user_id {user_id} (state: {current_state}, type: {content_type})")
        if user_id in user_states:
            # –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            keys_to_remove = [key for key in list(user_states.keys()) if key.startswith(f"{user_id}")]
            for key in keys_to_remove:
                 user_states.pop(key, None)
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ user_id {user_id} —Å–±—Ä–æ—à–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ handle_any_message.", extra={'user_id': str(user_id)})

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def handle_text_message(bot: AsyncTeleBot, message: types.Message, current_state: Optional[str]):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = message.chat.id
    text = message.text.strip()

    if not text:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.", extra={'user_id': str(user_id)})
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
    state_handlers = {
        STATE_WAITING_FOR_TRANSLATE_TEXT: handle_state_translate,
        STATE_WAITING_FOR_SUMMARIZE_INPUT: handle_state_summarize,
        STATE_WAITING_FOR_INCOME_SKILLS: handle_state_income_skills,
        STATE_WAITING_FOR_INCOME_TERM: handle_state_income_term,
        STATE_WAITING_FOR_INCOME_RESOURCES: handle_state_income_resources,
        STATE_WAITING_FOR_INCOME_INTERESTS: handle_state_income_interests,
        STATE_WAITING_FOR_REMINDER_TEXT: handle_state_reminder_text,
        STATE_WAITING_FOR_REMINDER_TIME: handle_state_reminder_time,
        STATE_WAITING_FOR_TIMEZONE: handle_state_timezone_text,
        STATE_WAITING_FOR_HISTORY_DATE: lambda b, m: reply_to_message(b, m, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /reset –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    }

    if current_state in state_handlers:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state}", extra={'user_id': str(user_id)})
        await state_handlers[current_state](bot, message)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ReplyKeyboard ---
    button_handlers = {
        'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç': handle_personal_account_button,
        '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': handle_reminders_button,
    }

    if text in button_handlers:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–µ: {text}", extra={'user_id': str(user_id)})
        await button_handlers[text](bot, message)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ---
    text_lower = text.lower()
    if is_help_request(text_lower):
         logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏.", extra={'user_id': str(user_id)})
         await handle_help_request_message(bot, message)
         return
    if is_model_request(text_lower):
         logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –æ –º–æ–¥–µ–ª–∏.", extra={'user_id': str(user_id)})
         await handle_model_request_message(bot, message)
         return

    # --- –ï—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini ---
    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞–º –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Gemini.", extra={'user_id': str(user_id)})
    await handle_general_text_query(bot, message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
# ... (handle_state_translate, handle_state_summarize - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def handle_state_translate(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."""
    user_id = message.chat.id
    text_to_translate = message.text.strip()
    target_lang_code = user_states.get(f"{user_id}_target_lang")

    if not target_lang_code:
        logger.warning(f"–ù–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É user_id {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {STATE_WAITING_FOR_TRANSLATE_TEXT}", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, "–ù–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–∞–≤ 'üá∑üá∫ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏' –∏–ª–∏ /translate.", reply_markup=mk.create_main_keyboard())
        user_states.pop(user_id, None)
        return

    if not text_to_translate:
        await reply_to_message(bot, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    lang_name = LANGUAGE_FLAGS.get(target_lang_code, target_lang_code)
    logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è user_id {user_id} –Ω–∞ —è–∑—ã–∫ {lang_name} ({target_lang_code})", extra={'user_id': str(user_id)})
    await send_typing_action(bot, user_id)

    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫ '{lang_name}' (–∫–æ–¥: {target_lang_code}). –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑:\n\n{text_to_translate}"
    response = await asyncio.to_thread(gemini_service.generate_response, user_id, prompt, store_in_db=True)

    user_states.pop(user_id, None)
    user_states.pop(f"{user_id}_target_lang", None)

    if response:
        await reply_to_message(bot, message, response, reply_markup=mk.create_main_keyboard())
    else:
        await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç) –¥–ª—è user_id {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def handle_state_summarize(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞/—Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è."""
    user_id = message.chat.id
    text_or_url = message.text.strip()
    combined_text = ""
    source_type = "—Ç–µ–∫—Å—Ç"

    if not text_or_url:
         await reply_to_message(bot, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è.")
         return

    if text_helpers.is_url(text_or_url):
        source_type = "URL"
        logger.info(f"–ü–æ–ª—É—á–µ–Ω URL –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è –æ—Ç {user_id}: {text_or_url}", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, f"üîó –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '{text_or_url}'...", parse_mode='None')
        await send_typing_action(bot, user_id)
        webpage_text = await asyncio.to_thread(web_helpers.get_text_from_url, text_or_url)

        if webpage_text:
            combined_text = webpage_text[:MAX_SUMMARIZE_CHARS]
            if len(webpage_text) > MAX_SUMMARIZE_CHARS:
                 await send_message(bot, user_id, f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ ~{MAX_SUMMARIZE_CHARS // 1000} —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤.")
        else:
            await reply_to_message(bot, message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.", reply_markup=mk.create_main_keyboard())
            return
    else:
        source_type = "—Ç–µ–∫—Å—Ç"
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è –æ—Ç {user_id}", extra={'user_id': str(user_id)})
        combined_text = text_or_url[:MAX_SUMMARIZE_CHARS]
        if len(text_or_url) > MAX_SUMMARIZE_CHARS:
             await send_message(bot, user_id, f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ ~{MAX_SUMMARIZE_CHARS // 1000} —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤.")

    user_states.pop(user_id, None)

    if not combined_text:
        await reply_to_message(bot, message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {source_type} –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è.", reply_markup=mk.create_main_keyboard())
        return

    await reply_to_message(bot, message, "‚è≥ –ì–æ—Ç–æ–≤–ª—é –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ...", parse_mode='None')
    await send_typing_action(bot, user_id)

    prompt = f"""–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫: {source_type}). –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ, –≥–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã.
–¢–µ–∫—Å—Ç –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è:
---
{combined_text}
---
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –∏–∑–ª–æ–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
    response = await asyncio.to_thread(gemini_service.generate_response, user_id, prompt, store_in_db=True)

    if response:
        parts = smart_split(response, chars_per_string=4000)
        for part in parts:
             await send_message(bot, user_id, part, reply_markup=mk.create_main_keyboard())
             await asyncio.sleep(0.1)
    else:
        await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –∏–∑–ª–æ–∂–µ–Ω–∏—è ({source_type}) –¥–ª—è user_id {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# ... (handle_state_income_... - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def handle_state_income_skills(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∞ –¥–æ—Ö–æ–¥–∞."""
    user_id = message.chat.id
    skills = message.text.strip()
    if not skills:
        await reply_to_message(bot, message, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–≤—ã–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏—Ö:")
        return
    user_states[f"{user_id}_income_skills"] = skills
    user_states[user_id] = STATE_WAITING_FOR_INCOME_TERM
    logger.debug(f"–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞: –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–≤—ã–∫–∏ –æ—Ç {user_id}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ {STATE_WAITING_FOR_INCOME_TERM}", extra={'user_id': str(user_id)})
    await reply_to_message(bot, message, "‚è≥ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥'):")

async def handle_state_income_term(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∞ –¥–æ—Ö–æ–¥–∞."""
    user_id = message.chat.id
    term = message.text.strip()
    if not term:
        await reply_to_message(bot, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫:")
        return
    user_states[f"{user_id}_income_term"] = term
    user_states[user_id] = STATE_WAITING_FOR_INCOME_RESOURCES
    logger.debug(f"–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞: –ü–æ–ª—É—á–µ–Ω —Å—Ä–æ–∫ –æ—Ç {user_id}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ {STATE_WAITING_FOR_INCOME_RESOURCES}", extra={'user_id': str(user_id)})
    await reply_to_message(bot, message, "üìù –ü–æ–Ω—è–ª. –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Å–≤—è–∑–∏, –≤—Ä–µ–º—è –∏ —Ç.–¥.):")

async def handle_state_income_resources(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∞ –¥–æ—Ö–æ–¥–∞."""
    user_id = message.chat.id
    resources = message.text.strip()
    if not resources:
        await reply_to_message(bot, message, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ—é—â–∏–µ—Å—è —Ä–µ—Å—É—Ä—Å—ã (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç', –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç):")
        return
    user_states[f"{user_id}_income_resources"] = resources
    user_states[user_id] = STATE_WAITING_FOR_INCOME_INTERESTS
    logger.debug(f"–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞: –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ—Å—É—Ä—Å—ã –æ—Ç {user_id}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ {STATE_WAITING_FOR_INCOME_INTERESTS}", extra={'user_id': str(user_id)})
    await reply_to_message(bot, message, "üí° –•–æ—Ä–æ—à–æ. –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –∫–∞–∫–∏–µ —É –≤–∞—Å –ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–ª–∏ —Ö–æ–±–±–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å?")

async def handle_state_income_interests(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥) –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –¥–æ—Ö–æ–¥–∞."""
    user_id = message.chat.id
    interests = message.text.strip() or "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    user_states[f"{user_id}_income_interests"] = interests
    logger.debug(f"–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞: –ü–æ–ª—É—á–µ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ—Ç {user_id}. –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", extra={'user_id': str(user_id)})

    skills = user_states.get(f"{user_id}_income_skills", "–Ω–µ —É–∫–∞–∑–∞–Ω—ã")
    term = user_states.get(f"{user_id}_income_term", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    resources = user_states.get(f"{user_id}_income_resources", "–Ω–µ —É–∫–∞–∑–∞–Ω—ã")

    user_states.pop(user_id, None)
    for key_suffix in ['skills', 'term', 'resources', 'interests']:
        user_states.pop(f"{user_id}_income_{key_suffix}", None)
    logger.debug(f"–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω—ã.", extra={'user_id': str(user_id)})

    await reply_to_message(bot, message, "‚è≥ –°–ø–∞—Å–∏–±–æ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞. –°–æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Ö–æ–¥–∞...", parse_mode='None')
    await send_typing_action(bot, user_id)

    prompt = f"""
–†–∞–∑—Ä–∞–±–æ—Ç–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –∏–ª–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

- –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {skills}
- –ñ–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {term}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Å–≤—è–∑–∏, –≤—Ä–µ–º—è –∏ —Ç.–¥.): {resources}
- –õ–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏: {interests}

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–∫–ª—é—á–∞—Ç—å:
1.  **–ê–Ω–∞–ª–∏–∑:** –û—Ü–µ–Ω–∫–∞ 2-3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å—Ä–æ–∫–∞. –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞.
2.  **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –æ–±—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–µ–π—Å—Ç–≤–∏–π. –ö–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è, –≥–¥–µ –∏—Å–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤/–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
3.  **–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω:** –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–∑–º–µ—Ä–∏–º—ã–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ß—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–¥–µ–ª—è 1-2, –º–µ—Å—è—Ü 1, –∫–≤–∞—Ä—Ç–∞–ª 1). –£–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞.
4.  **–†–µ—Å—É—Ä—Å—ã –∏ –ò–Ω—Ç–µ—Ä–µ—Å—ã:** –ö–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è —Ä–µ—Å—É—Ä—Å—ã? –ö–∞–∫ –º–æ–∂–Ω–æ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ö–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã?
5.  **–†–∏—Å–∫–∏ –∏ –†–µ—à–µ–Ω–∏—è:** –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ 2-3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –∏ –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –∏–ª–∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å.
6.  **–ú–æ—Ç–∏–≤–∞—Ü–∏—è:** –ù–µ–±–æ–ª—å—à–æ–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∞–±–∑–∞—Ü –≤ –∫–æ–Ω—Ü–µ.

–ü—Ä–µ–¥—Å—Ç–∞–≤—å –ø–ª–∞–Ω –≤ —á–µ—Ç–∫–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ (–∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏). –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
    response = await asyncio.to_thread(gemini_service.generate_response, user_id, prompt, store_in_db=True)

    if response:
        parts = smart_split(response, chars_per_string=4000)
        for part in parts:
            await send_message(bot, user_id, part, reply_markup=mk.create_main_keyboard())
            await asyncio.sleep(0.1)
    else:
        await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –¥–æ—Ö–æ–¥–∞ –¥–ª—è user_id {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–æ—Ö–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# ... (handle_state_reminder_... - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def handle_state_reminder_text(bot: AsyncTeleBot, message: types.Message):
     """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –î–ê–¢–´."""
     user_id = message.chat.id
     reminder_text = message.text.strip()
     if not reminder_text:
         await reply_to_message(bot, message, "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
         return

     user_states[f"{user_id}_reminder_text"] = reminder_text
     user_states[user_id] = STATE_WAITING_FOR_REMINDER_DATE
     logger.debug(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {user_id}. –ü–µ—Ä–µ—Ö–æ–¥ –∫ {STATE_WAITING_FOR_REMINDER_DATE}", extra={'user_id': str(user_id)})

     calendar_markup = mk.create_calendar_keyboard(disable_past=True)
     await send_message(bot, user_id, "üóìÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É** –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–∏–∂–µ:", reply_markup=calendar_markup)

async def handle_state_reminder_time(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ß–ß:–ú–ú)."""
    user_id = message.chat.id
    time_str = message.text.strip()

    reminder_text = user_states.get(f"{user_id}_reminder_text")
    reminder_date_str = user_states.get(f"{user_id}_reminder_date")

    if not reminder_text or not reminder_date_str:
        error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "
        missing_data = []
        if not reminder_text: missing_data.append("—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        if not reminder_date_str: missing_data.append("–¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        error_msg += f"–Ω–µ –Ω–∞–π–¥–µ–Ω—ã {', '.join(missing_data)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–∞–≤ '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'."
        logger.warning(f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {STATE_WAITING_FOR_REMINDER_TIME}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing_data)}", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, error_msg, reply_markup=mk.create_main_keyboard())
        user_states.pop(user_id, None)
        user_states.pop(f"{user_id}_reminder_text", None)
        user_states.pop(f"{user_id}_reminder_date", None)
        return

    try:
        reminder_time_obj = datetime.datetime.strptime(time_str, "%H:%M").time()
        reminder_date_obj = datetime.datetime.strptime(reminder_date_str, "%Y-%m-%d").date()
        reminder_dt_naive = datetime.datetime.combine(reminder_date_obj, reminder_time_obj)

        user_timezone_str = db_manager.get_user_timezone(user_id)
        reminder_dt_utc: datetime.datetime

        if user_timezone_str:
            try:
                user_tz = pytz.timezone(user_timezone_str)
                reminder_dt_local = user_tz.localize(reminder_dt_naive, is_dst=None)
                reminder_dt_utc = reminder_dt_local.astimezone(pytz.utc)
                logger.debug(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id} ({time_str} –≤ {user_timezone_str}) –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ UTC: {reminder_dt_utc}", extra={'user_id': str(user_id)})
            except pytz.UnknownTimeZoneError:
                 logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å '{user_timezone_str}' —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC.", extra={'user_id': str(user_id)})
                 reminder_dt_utc = pytz.utc.localize(reminder_dt_naive)
            except (pytz.AmbiguousTimeError, pytz.NonExistentTimeError) as tz_err:
                 logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º {time_str} –¥–ª—è {user_id} –≤ {user_timezone_str}: {tz_err}. –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC.", extra={'user_id': str(user_id)})
                 reminder_dt_utc = pytz.utc.localize(reminder_dt_naive)
        else:
             logger.warning(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id {user_id}. –í—Ä–µ–º—è {time_str} –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ UTC.", extra={'user_id': str(user_id)})
             reminder_dt_utc = pytz.utc.localize(reminder_dt_naive)
             await send_message(bot, user_id, "üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ /settings –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", parse_mode='None')

        now_utc = datetime.datetime.now(pytz.utc)
        if reminder_dt_utc <= (now_utc - datetime.timedelta(minutes=1)):
             await reply_to_message(bot, message, "–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú).")
             return

        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}. –¢–µ–∫—Å—Ç: '{reminder_text[:50]}...'. –í—Ä–µ–º—è UTC: {reminder_dt_utc}", extra={'user_id': str(user_id)})
        success = await reminders.schedule_reminder(bot, user_id, reminder_text, reminder_dt_utc)

        user_states.pop(user_id, None)
        user_states.pop(f"{user_id}_reminder_text", None)
        user_states.pop(f"{user_id}_reminder_date", None)

        if success:
            time_confirm_utc_str = reminder_dt_utc.strftime("%d.%m.%Y %H:%M %Z")
            confirm_msg = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ **{time_confirm_utc_str}**!"
            if user_timezone_str:
                 try:
                      user_tz = pytz.timezone(user_timezone_str)
                      local_dt = reminder_dt_utc.astimezone(user_tz)
                      time_confirm_local_str = local_dt.strftime("%d.%m.%Y %H:%M")
                      confirm_msg += f"\n(–í–∞—à–µ –≤—Ä–µ–º—è: {time_confirm_local_str} {user_timezone_str})"
                 except Exception: pass
            await reply_to_message(bot, message, confirm_msg, reply_markup=mk.create_main_keyboard())
        else:
            await reply_to_message(bot, message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=mk.create_main_keyboard())

    except ValueError as e:
        if "time data" in str(e) and ("match format '%H:%M'" in str(e)):
            await reply_to_message(bot, message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–ß–ß:–ú–ú** (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:05).")
        elif "time data" in str(e) and ("match format '%Y-%m-%d'" in str(e)):
             logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –¥–∞—Ç—ã '{reminder_date_str}' –¥–ª—è user_id {user_id}: {e}", extra={'user_id': str(user_id)})
             await reply_to_message(bot, message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–¥–∞—Ç–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=mk.create_main_keyboard())
             user_states.pop(user_id, None)
             user_states.pop(f"{user_id}_reminder_text", None)
             user_states.pop(f"{user_id}_reminder_date", None)
        else:
             logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ValueError –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}", extra={'user_id': str(user_id)})
             await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
             user_states.pop(user_id, None)
             user_states.pop(f"{user_id}_reminder_text", None)
             user_states.pop(f"{user_id}_reminder_date", None)

    except Exception as e:
         await send_error_reply(bot, message, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
         user_states.pop(user_id, None)
         user_states.pop(f"{user_id}_reminder_text", None)
         user_states.pop(f"{user_id}_reminder_date", None)

# ... (handle_state_timezone_... - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def handle_state_timezone_text(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
    user_id = message.chat.id
    tz_name = message.text.strip()

    if tz_name.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel", "—Å—Ç–æ–ø", "stop", "/stop"]:
        user_states.pop(user_id, None)
        await reply_to_message(bot, message, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=mk.create_main_keyboard())
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.", extra={'user_id': str(user_id)})
        return

    if tz_name in pytz.all_timezones_set:
        db_manager.set_user_timezone(user_id, tz_name)
        logger.info(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{tz_name}' —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ **{tz_name}**.", reply_markup=mk.create_main_keyboard())
        user_states.pop(user_id, None)
    else:
        possible_tzs = [tz for tz in pytz.all_timezones if tz_name.lower() in tz.lower()]
        if possible_tzs:
             response_text = f"ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å '{tz_name}'. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö:\n"
             response_text += "\n".join([f"- `{tz}`" for tz in possible_tzs[:10]])
             if len(possible_tzs) > 10: response_text += "\n..."
             response_text += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
             await reply_to_message(bot, message, response_text)
        else:
             await reply_to_message(bot, message, f"‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å '{tz_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Moscow`, `Asia/Yekaterinburg`), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")

async def handle_state_timezone_location(bot: AsyncTeleBot, message: types.Message):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∑–æ–Ω—ã."""
    user_id = message.chat.id
    if not message.location:
         logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {STATE_WAITING_FOR_TIMEZONE} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç user_id {user_id}.", extra={'user_id': str(user_id)})
         return

    latitude = message.location.latitude
    longitude = message.location.longitude
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç {user_id} –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∑–æ–Ω—ã: lat={latitude}, lon={longitude}", extra={'user_id': str(user_id)})

    timezone_name = await asyncio.to_thread(find_timezone_at, lat=latitude, lng=longitude)

    if timezone_name and timezone_name in pytz.all_timezones_set:
        db_manager.set_user_timezone(user_id, timezone_name)
        logger.info(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{timezone_name}' –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, f"‚úÖ –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ **{timezone_name}** –∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=mk.create_main_keyboard())
        user_states.pop(user_id, None)
    elif find_timezone_at is None: # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞
        await reply_to_message(bot, message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (`timezonefinder`) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", reply_markup=mk.create_main_keyboard())
        user_states.pop(user_id, None)
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ({latitude}, {longitude}) –¥–ª—è user_id {user_id}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {timezone_name}", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Moscow`) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–§–æ—Ç–æ, –î–æ–∫—É–º–µ–Ω—Ç—ã) ---

async def handle_photo_message(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ç–æ."""
    user_id = message.chat.id
    photo_id = message.photo[-1].file_id
    caption = message.caption or ""

    await reply_to_message(bot, message, "üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", parse_mode='None')
    await send_typing_action(bot, user_id)

    try:
        # --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
        file_info = await bot.get_file(photo_id)
        if not file_info or not file_info.file_path:
            await send_error_reply(bot, message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —Ñ–æ—Ç–æ {photo_id} –¥–ª—è {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ (–æ—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ).")
            return

        # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–∫–∞—á–∏–≤–∞–µ–º –±–∞–π—Ç—ã ---
        logger.debug(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ {file_info.file_path} –¥–ª—è user_id {user_id}")
        downloaded_bytes = await bot.download_file(file_info.file_path)
        if not downloaded_bytes:
             await send_error_reply(bot, message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ {photo_id} (bytes) –¥–ª—è {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ (–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è).")
             return
        logger.debug(f"–§–æ—Ç–æ {file_info.file_path} —Å–∫–∞—á–∞–Ω–æ ({len(downloaded_bytes)} bytes) –¥–ª—è user_id {user_id}")

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
        try:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑ –±–∞–π—Ç–æ–≤ ---
            image = PIL.Image.open(BytesIO(downloaded_bytes))
        except PIL.UnidentifiedImageError:
             await send_error_reply(bot, message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {photo_id} –¥–ª—è {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç).")
             return
        except Exception as img_err:
             await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {photo_id} –¥–ª—è {user_id}: {img_err}", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ (–æ—à–∏–±–∫–∞ PIL).")
             return
        # BytesIO –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Gemini ---
        prompt_parts: List[Union[str, PIL.Image.Image]] = [image]
        text_prompt = caption.strip() or "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ."
        text_prompt += " –ï—Å–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å (—Ä–∞—Å—Ç–µ–Ω–∏–µ, –∂–∏–≤–æ—Ç–Ω–æ–µ, –±–ª—é–¥–æ, –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç.–ø.), –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É –æ –Ω–µ–º."
        prompt_parts.append(text_prompt)
        logger.debug(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ user_id {user_id}: '{text_prompt[:100]}...'", extra={'user_id': str(user_id)})

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Gemini ---
        response = await asyncio.to_thread(gemini_service.generate_response, user_id, prompt_parts, store_in_db=True)

        if response:
            parts = smart_split(response, chars_per_string=4000)
            for part in parts:
                await send_message(bot, user_id, part, reply_markup=mk.create_main_keyboard())
                await asyncio.sleep(0.1)
        else:
            await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ {photo_id} (Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç) –¥–ª—è {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    except Exception as e:
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ get_file –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ
        await send_error_reply(bot, message, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ {photo_id} –¥–ª—è {user_id}: {e}")


async def handle_document_message(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–ª–æ–∂–µ–Ω–∏—è)."""
    user_id = message.chat.id
    doc = message.document
    file_id = doc.file_id
    file_name = doc.file_name or "document"
    mime_type = doc.mime_type or "unknown"
    file_size = doc.file_size or 0

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}' ({mime_type}, {file_size} bytes) –æ—Ç {user_id} –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è.", extra={'user_id': str(user_id)})

    MAX_DOC_SIZE = 20 * 1024 * 1024
    if file_size > MAX_DOC_SIZE:
        logger.warning(f"–î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –æ—Ç {user_id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size} bytes).", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–±–æ–ª—å—à–µ {MAX_DOC_SIZE // 1024 // 1024} –ú–ë). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.", reply_markup=mk.create_main_keyboard())
        return

    await reply_to_message(bot, message, f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}'...", parse_mode='None')
    await send_typing_action(bot, user_id)

    downloaded_file_path: Optional[str] = None
    extracted_text: Optional[str] = None

    try:
        downloaded_file_path = await file_helpers.save_downloaded_file(bot, file_id, file_name)
        if not downloaded_file_path:
            await reply_to_message(bot, message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=mk.create_main_keyboard())
            return

        file_ext = os.path.splitext(file_name)[1].lower()
        text_extractor = None
        if 'wordprocessingml.document' in mime_type or file_ext == '.docx':
            text_extractor = file_helpers.get_text_from_docx
            logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ DOCX.", extra={'user_id': str(user_id)})
        elif 'pdf' in mime_type or file_ext == '.pdf':
            text_extractor = file_helpers.get_text_from_pdf
            logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ PDF.", extra={'user_id': str(user_id)})
        elif 'text/plain' in mime_type or file_ext == '.txt':
            text_extractor = file_helpers.get_text_from_txt
            logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ TXT.", extra={'user_id': str(user_id)})
        else:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}' (MIME: {mime_type}, Ext: {file_ext}) –æ—Ç {user_id}.", extra={'user_id': str(user_id)})
            await reply_to_message(bot, message, "‚ùå –§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX, PDF –∏–ª–∏ TXT.", reply_markup=mk.create_main_keyboard())
            user_states.pop(user_id, None)
            return

        extracted_text = await asyncio.to_thread(text_extractor, downloaded_file_path)

        if not extracted_text:
             await reply_to_message(bot, message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—É—Å—Ç–æ–π, –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.", reply_markup=mk.create_main_keyboard())
             user_states.pop(user_id, None)
             return

        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ ~{len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}' –æ—Ç {user_id}", extra={'user_id': str(user_id)})

        combined_text = extracted_text[:MAX_SUMMARIZE_CHARS]
        if len(extracted_text) > MAX_SUMMARIZE_CHARS:
            await send_message(bot, user_id, f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ ~{MAX_SUMMARIZE_CHARS // 1000} —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤.")

        user_states.pop(user_id, None)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_id {user_id} —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.", extra={'user_id': str(user_id)})

        await reply_to_message(bot, message, "‚è≥ –ì–æ—Ç–æ–≤–ª—é –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...", parse_mode='None')
        await send_typing_action(bot, user_id)

        prompt = f"""–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}'. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏, –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ, –≥–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã.
–¢–µ–∫—Å—Ç –¥–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è:
---
{combined_text}
---
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –∏–∑–ª–æ–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
        response = await asyncio.to_thread(gemini_service.generate_response, user_id, prompt, store_in_db=True)

        if response:
            parts = smart_split(response, chars_per_string=4000)
            for part in parts:
                await send_message(bot, user_id, part, reply_markup=mk.create_main_keyboard())
                await asyncio.sleep(0.1)
        else:
            await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –∏–∑–ª–æ–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}' –¥–ª—è {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    except Exception as e:
         await send_error_reply(bot, message, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{file_name}' –¥–ª—è {user_id}")
         user_states.pop(user_id, None)
    finally:
        if downloaded_file_path:
             await asyncio.to_thread(file_helpers.cleanup_file, downloaded_file_path)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–Ω–µ-–∫–æ–º–∞–Ω–¥) ---

async def handle_personal_account_button(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'."""
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –æ—Ç user_id {user_id}", extra={'user_id': str(user_id)})
    await send_typing_action(bot, user_id)
    info_text = await asyncio.to_thread(personal_account.get_personal_account_info, user_id)
    await reply_to_message(bot, message, info_text, reply_markup=mk.create_main_keyboard(), parse_mode='Markdown')

async def handle_reminders_button(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'."""
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç user_id {user_id}", extra={'user_id': str(user_id)})
    await send_typing_action(bot, user_id)
    try:
        user_reminders = db_manager.get_user_reminders(user_id)
        reminders_markup = mk.create_reminders_keyboard(user_reminders)
        await reply_to_message(bot, message, "‚è∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏**\n–ù–∞–∂–º–∏—Ç–µ '‚ûï', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ, –∏–ª–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.", reply_markup=reminders_markup, parse_mode='Markdown')
    except Exception as e:
        await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è user_id {user_id}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---

def is_help_request(message_lower: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–º–æ—â–∏."""
    help_keywords = ["—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "—á—Ç–æ –º–æ–∂–µ—à—å", "—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ñ—É–Ω–∫—Ü–∏–∏",
                     "—É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", "–∫–Ω–æ–ø–∫–∏", "—á—Ç–æ –¥–µ–ª–∞—é—Ç –∫–Ω–æ–ø–∫–∏", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞", "—Ö–µ–ª–ø", "help", "/help"]
    return any(re.search(r'\b' + re.escape(keyword) + r'\b', message_lower) for keyword in help_keywords)

def is_model_request(message_lower: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –æ –º–æ–¥–µ–ª–∏."""
    model_keywords = ["–º–æ–¥–µ–ª—å", "–∫–∞–∫–∞—è –º–æ–¥–µ–ª—å", "–Ω–∞ –∫–∞–∫–æ–π –º–æ–¥–µ–ª–∏", "gemini", "–≥—É–≥–ª", "google"]
    return any(re.search(r'\b' + re.escape(keyword) + r'\b', message_lower) for keyword in model_keywords)

async def handle_help_request_message(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –æ—Ç {user_id}: '{message.text[:50]}...'", extra={'user_id': str(user_id)})
    await send_typing_action(bot, user_id)
    logger.debug(f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ –æ—Ç {user_id} –Ω–∞ handle_help.", extra={'user_id': str(user_id)})
    from .command_handlers import handle_help
    await handle_help(message, bot)

async def handle_model_request_message(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –º–æ–¥–µ–ª–∏ Gemini."""
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –æ –º–æ–¥–µ–ª–∏ –æ—Ç {user_id}: '{message.text[:50]}...'", extra={'user_id': str(user_id)})
    await send_typing_action(bot, user_id)
    try:
        model_name = gemini_service.model.model_name
        response_text = f"–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Google Gemini** (–º–æ–¥–µ–ª—å `{model_name}`). –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –º–æ—â–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –æ—Ç Google AI."
        await reply_to_message(bot, message, response_text, reply_markup=mk.create_main_keyboard())
    except Exception as e:
         await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ –¥–ª—è {user_id}: {e}", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏.")

# --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini ---

async def handle_general_text_query(bot: AsyncTeleBot, message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini, –ø—Ä–∏–º–µ–Ω—è—è —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è."""
    user_id = message.chat.id
    text = message.text.strip()
    await send_typing_action(bot, user_id)

    user_style = db_manager.get_user_bot_style(user_id)
    style_prompt_suffix = ""
    if user_style != 'default':
        style_desc = BOT_STYLES.get(user_style, "").lower().replace('—ë','–µ')
        style_instruction = f" (–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: {style_desc})."
        full_prompt = text + style_instruction
        logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å—Ç–∏–ª—å '{user_style}' –¥–ª—è user_id {user_id}. –ü—Ä–æ–º–ø—Ç: '{full_prompt[:100]}...'", extra={'user_id': str(user_id)})
    else:
        full_prompt = text

    response = await asyncio.to_thread(gemini_service.generate_response, user_id, full_prompt, store_in_db=True)

    if response:
        parts = smart_split(response, chars_per_string=4000)
        for part in parts:
             await send_message(bot, user_id, part, reply_markup=mk.create_main_keyboard())
             await asyncio.sleep(0.05)
    else:
        await send_error_reply(bot, message, f"–û—à–∏–±–∫–∞ Gemini –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {user_id}", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

def register_message_handlers(bot: AsyncTeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    bot.register_message_handler(handle_any_message,
                                 content_types=['text', 'photo', 'document', 'location'],
                                 pass_bot=True)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

# --- END OF FILE handlers/message_handlers.py ---