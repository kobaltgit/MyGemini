# --- START OF FILE handlers/command_handlers.py ---
import datetime
import asyncio
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from telebot import apihelper
# from utils.text_helpers import escape_markdown_v2, sanitize_text_for_telegram
from utils import text_helpers
from utils import markup_helpers as mk

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config.settings import (
    ADMIN_USER_ID, LANGUAGE_FLAGS, CALLBACK_LANG_PREFIX,
    STATE_WAITING_FOR_TRANSLATE_TEXT, STATE_WAITING_FOR_SUMMARIZE_INPUT,
    STATE_WAITING_FOR_INCOME_SKILLS, STATE_WAITING_FOR_HISTORY_DATE,
    MAX_SUMMARIZE_CHARS
)
from database import db_manager
from services import gemini_service
from features import personal_account, reminders
from logger_config import get_logger

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

logger = get_logger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–º, –≥–¥–µ –ù–£–ñ–ù–ê –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Markdown

async def send_message(bot: AsyncTeleBot, chat_id: int, text: str, reply_markup=None, parse_mode='None'): # –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ parse_mode='None' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —É–±—Ä–∞–ª–∏ force_plain_text
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ plain text (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown).
    –ü–∞—Ä–∞–º–µ—Ç—Ä parse_mode –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'None'.
    """
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ plain text (–±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏)
    try:
        logger.debug(f"[Plain Text Only] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è user_id {chat_id} –∫–∞–∫ plain text.", extra={'user_id': str(chat_id)})
        await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode='None') # parse_mode='None' (—Å—Ç—Ä–æ–∫–∞)
        logger.debug(f"[Plain Text Only] –°–æ–æ–±—â–µ–Ω–∏–µ user_id {chat_id} –∫–∞–∫ plain text —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", extra={'user_id': str(chat_id)})
    except Exception as e:
        logger.error(f"[Plain Text Only] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è user_id {chat_id} –∫–∞–∫ plain text: {e}", exc_info=True, extra={'user_id': str(chat_id)})


async def reply_to_message(bot: AsyncTeleBot, message: types.Message, text: str, reply_markup=None, parse_mode='None'): # –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ parse_mode='None' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ plain text (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown).
    –ü–∞—Ä–∞–º–µ—Ç—Ä parse_mode –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'None'.
    """
    chat_id = message.chat.id
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ plain text (–±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏)
    try:
        logger.debug(f"[Plain Text Reply] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ user_id {chat_id} –∫–∞–∫ plain text.", extra={'user_id': str(chat_id)})
        await bot.reply_to(message, text, reply_markup=reply_markup, parse_mode='None') # parse_mode='None'
        logger.debug(f"[Plain Text Reply] –û—Ç–≤–µ—Ç user_id {chat_id} –∫–∞–∫ plain text —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", extra={'user_id': str(chat_id)})
    except Exception as e:
         logger.error(f"[Plain Text Reply] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ user_id {chat_id} –∫–∞–∫ plain text: {e}", exc_info=True, extra={'user_id': str(chat_id)})


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def handle_start(message: types.Message, bot: AsyncTeleBot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º "—Å—ã—Ä—ã–µ" –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    raw_first_name = message.from_user.first_name if message.from_user else None
    raw_username = message.from_user.username if message.from_user else None
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id: {user_id} (@{raw_username}, {raw_first_name})", extra={'user_id': str(user_id)})

    db_manager.add_or_update_user(user_id)
    if user_id in user_states:
        user_states.pop(user_id, None)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_id {user_id} —Å–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ /start.", extra={'user_id': str(user_id)})
    gemini_service.reset_user_chat(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ
    greeting_name_to_use = raw_first_name or raw_username or "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    # escaped_greeting_name = escape_markdown_v2(greeting_name_to_use)

    welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {greeting_name_to_use}! –Ø —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Gemini.

–ß—Ç–æ —è —É–º–µ—é:

üß† –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã.
üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É).
üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç (–∫–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏').
üìù –î–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤, –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∞ '–ò–∑–ª–æ–∂–∏—Ç—å').
üí∞ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω –¥–æ—Ö–æ–¥–∞ (–∫–Ω–æ–ø–∫–∞ '–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞').
‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è').
üìú –°–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–∫–Ω–æ–ø–∫–∞ '–ò—Å—Ç–æ—Ä–∏—è').
üë§ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–∫–Ω–æ–ø–∫–∞ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç').
‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Ç–∏–ª—å –º–æ–µ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ *—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å* (–∫–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏').

üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!
–î–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞–∂–º–∏ 'üîÑ –°–±—Ä–æ—Å'.
–î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏ '‚ùì –ü–æ–º–æ—â—å' –∏–ª–∏ –≤–≤–µ–¥–∏ /help.
"""

    # # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (parse_mode='None')
    # if ADMIN_USER_ID and ADMIN_USER_ID != user_id:
    #     try:
    #         admin_notify_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!\nID: {user_id}"
    #         # –ò—Å–ø–æ–ª—å–∑—É–µ–º sanitize –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    #         if raw_first_name: admin_notify_text += f"\n–ò–º—è: {sanitize_text_for_telegram(raw_first_name)}"
    #         if raw_username: admin_notify_text += f"\nUsername: {sanitize_text_for_telegram(raw_username)}" # @ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω
    #         # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ bot.send_message ---
    #         logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ bot.send_message –¥–ª—è ADMIN_USER_ID {ADMIN_USER_ID} —Å parse_mode='None'", extra={'user_id': str(user_id)})
    #         await bot.send_message(ADMIN_USER_ID, admin_notify_text, parse_mode='None')
    #         logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_USER_ID} –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", extra={'user_id': str(user_id)})
    #     except Exception as admin_err:
    #          # –õ–æ–≤–∏–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
    #          logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {ADMIN_USER_ID}: {admin_err}", exc_info=True, extra={'user_id': str(user_id)})

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (parse_mode='None' ‚Äî –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, —á—Ç–æ–±—ã Telegram –ù–ï –ø–∞—Ä—Å–∏–ª Markdown/HTML)
    if ADMIN_USER_ID and ADMIN_USER_ID != user_id:
        try:
            admin_notify_text = f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!\nID: {user_id}"
            if raw_first_name:
                admin_notify_text += f"\n–ò–º—è: {raw_first_name}"
            if raw_username:
                admin_notify_text += f"\nUsername: @{raw_username}"

            logger.debug(
                f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ bot.send_message –¥–ª—è ADMIN_USER_ID {ADMIN_USER_ID} —Å parse_mode='None'",
                extra={'user_id': str(user_id)}
            )

            await bot.send_message(
                ADMIN_USER_ID,
                admin_notify_text,
                parse_mode='None'  # –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫–æ–π, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É
            )

            logger.info(
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_USER_ID} –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
                extra={'user_id': str(user_id)}
            )

        except Exception as admin_err:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {ADMIN_USER_ID}: {admin_err}",
                exc_info=True,
                extra={'user_id': str(user_id)}
            )


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ Markdown
    await reply_to_message(bot, message, welcome_message, reply_markup=mk.create_main_keyboard(), parse_mode='None')

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def handle_help(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    help_message = """
üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É* üÜò

–Ø - —á–∞—Ç-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Google Gemini. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π:

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.
/reset - **–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å** –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞).
/myid - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram User ID.

*–§—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:*
üá∑üá∫ *–ü–µ—Ä–µ–≤–µ—Å—Ç–∏:* –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫.
üìù *–ò–∑–ª–æ–∂–∏—Ç—å:* –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL) –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (DOCX, PDF, TXT).
üí∞ *–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞:* –ü–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –ª–∏—á–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ).
üìú *–ò—Å—Ç–æ—Ä–∏—è:* –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –±–æ—Ç–æ–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å).
üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º, –≤–∞—à–µ –∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ *—á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞*.
‚ùì *–ü–æ–º–æ—â—å:* –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.
üîÑ *–°–±—Ä–æ—Å:* –ê–Ω–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã /reset.

*–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üñºÔ∏è *–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:* –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç, –∏ —è –æ–ø–∏—à—É –µ–≥–æ –∏–ª–∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–µ–º—É.
üó£Ô∏è *–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ:* –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—Å—Ç–æ–º.

*–°–æ–≤–µ—Ç—ã:*
- –ó–∞–¥–∞–≤–∞–π—Ç–µ —á—ë—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É—Å—Ç—Ä–æ–∏–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset, –µ—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞—à—ë–ª –≤ —Ç—É–ø–∏–∫.
- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ /settings –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
"""
    await reply_to_message(bot, message, help_message, reply_markup=mk.create_main_keyboard())

async def handle_reset(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reset (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞) –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    if user_id in user_states:
        user_states.pop(user_id, None)
        keys_to_remove = [key for key in list(user_states.keys()) if key.startswith(f"{user_id}_")]
        for key in keys_to_remove:
            user_states.pop(key, None)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ user_id {user_id} —Å–±—Ä–æ—à–µ–Ω—ã.", extra={'user_id': str(user_id)})
    gemini_service.reset_user_chat(user_id)
    await reply_to_message(bot, message, "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!", reply_markup=mk.create_main_keyboard())

async def handle_myid(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /myid –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    await reply_to_message(bot, message, f"–í–∞—à Telegram User ID: `{user_id}`", reply_markup=mk.create_main_keyboard())

async def handle_history(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /history (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞) –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    db_manager.add_or_update_user(user_id)
    calendar_markup = mk.create_calendar_keyboard(disable_past=False)
    await send_message(bot, user_id, "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=calendar_markup)
    user_states[user_id] = STATE_WAITING_FOR_HISTORY_DATE
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_FOR_HISTORY_DATE} –¥–ª—è user_id {user_id}", extra={'user_id': str(user_id)})

async def handle_settings(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    db_manager.add_or_update_user(user_id)
    settings_markup = mk.create_settings_keyboard(user_id)
    await send_message(bot, user_id, "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=settings_markup, parse_mode='None') # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ parse_mode='None'

async def handle_translate(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    db_manager.add_or_update_user(user_id)
    if user_id in user_states: user_states.pop(user_id, None)
    lang_markup = mk.create_language_selection_keyboard()
    await send_message(bot, user_id, "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç:", reply_markup=lang_markup, parse_mode='None') # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ parse_mode='None'

async def handle_summarize(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    db_manager.add_or_update_user(user_id)
    if user_id in user_states: user_states.pop(user_id, None)
    user_states.pop(f"{user_id}_summarize_parts", None)
    await reply_to_message(bot, message,
        f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (DOCX, PDF, TXT) –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è.\n\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ~{MAX_SUMMARIZE_CHARS // 1000} —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤.",
        reply_markup=mk.create_main_keyboard(), parse_mode='None' # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ parse_mode='None'
    )
    user_states[user_id] = STATE_WAITING_FOR_SUMMARIZE_INPUT
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_FOR_SUMMARIZE_INPUT} –¥–ª—è user_id {user_id}", extra={'user_id': str(user_id)})

async def handle_income_plan(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞ –¥–æ—Ö–æ–¥–∞ –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    db_manager.add_or_update_user(user_id)
    if user_id in user_states: user_states.pop(user_id, None)
    for key_suffix in ['skills', 'term', 'resources', 'interests']:
        user_states.pop(f"{user_id}_income_{key_suffix}", None)
    await reply_to_message(bot, message,
        "üí∞ –î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –¥–æ—Ö–æ–¥–∞! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ *–æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏*:",
        reply_markup=mk.create_main_keyboard(), parse_mode='None' # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ parse_mode='None'
    )
    user_states[user_id] = STATE_WAITING_FOR_INCOME_SKILLS
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_FOR_INCOME_SKILLS} –¥–ª—è user_id {user_id}", extra={'user_id': str(user_id)})

async def handle_broadcast(message: types.Message, bot: AsyncTeleBot):
    user_id = message.chat.id
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /broadcast –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
    if user_id != ADMIN_USER_ID:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /broadcast –æ—Ç user_id: {user_id}", extra={'user_id': str(user_id)})
        await reply_to_message(bot, message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=mk.create_main_keyboard(), parse_mode='None') # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ parse_mode='None'
        return

    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2 or not command_parts[1].strip():
        await reply_to_message(bot, message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`", reply_markup=mk.create_main_keyboard(), parse_mode='None') # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ parse_mode='None'
        return

    broadcast_text = command_parts[1].strip()
    from config.settings import CALLBACK_CONFIRM_BROADCAST, CALLBACK_CANCEL_BROADCAST
    confirm_markup = types.InlineKeyboardMarkup(row_width=1)
    confirm_markup.add(types.InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=CALLBACK_CONFIRM_BROADCAST))
    confirm_markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CALLBACK_CANCEL_BROADCAST))
    user_states[f"{ADMIN_USER_ID}_broadcast_text"] = broadcast_text
    active_user_count = len(db_manager.get_active_users())
    await reply_to_message(bot, message,
                           f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {active_user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n---\n{broadcast_text}\n---",
                           reply_markup=confirm_markup, parse_mode='None')

def register_command_handlers(bot: AsyncTeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫-—Å–∏–Ω–æ–Ω–∏–º–æ–≤."""
    bot.register_message_handler(handle_start, commands=['start'], pass_bot=True)
    bot.register_message_handler(handle_help, commands=['help'], pass_bot=True)
    bot.register_message_handler(handle_reset, commands=['reset'], pass_bot=True)
    bot.register_message_handler(handle_myid, commands=['myid'], pass_bot=True)
    bot.register_message_handler(handle_settings, commands=['settings'], pass_bot=True)
    bot.register_message_handler(handle_history, commands=['history'], pass_bot=True)
    bot.register_message_handler(handle_translate, commands=['translate'], pass_bot=True)
    bot.register_message_handler(handle_summarize, commands=['summarize'], pass_bot=True)
    bot.register_message_handler(handle_income_plan, commands=['incomeplan'], pass_bot=True)
    bot.register_message_handler(handle_broadcast, commands=['broadcast'], pass_bot=True)
    bot.register_message_handler(handle_reset, regexp=r'^üîÑ –°–±—Ä–æ—Å$', pass_bot=True)
    bot.register_message_handler(handle_help, regexp=r'^‚ùì –ü–æ–º–æ—â—å$', pass_bot=True)
    bot.register_message_handler(handle_translate, regexp=r'^üá∑üá∫ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏$', pass_bot=True)
    bot.register_message_handler(handle_summarize, regexp=r'^üìù –ò–∑–ª–æ–∂–∏—Ç—å$', pass_bot=True)
    bot.register_message_handler(handle_income_plan, regexp=r'^üí∞ –ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞$', pass_bot=True)
    bot.register_message_handler(handle_history, regexp=r'^üìú –ò—Å—Ç–æ—Ä–∏—è$', pass_bot=True)
    bot.register_message_handler(handle_settings, regexp=r'^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$', pass_bot=True)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫-—Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
# --- END OF FILE handlers/command_handlers.py ---