# File: utils/markup_helpers.py
from telebot import types
import datetime
from typing import List, Optional, Dict, Any

from config.settings import (
    BOT_STYLES, TRANSLATE_LANGUAGES,
    CALLBACK_SETTINGS_STYLE_PREFIX, CALLBACK_IGNORE,
    CALLBACK_CALENDAR_DATE_PREFIX, CALLBACK_CALENDAR_MONTH_PREFIX,
    CALLBACK_REPORT_ERROR, CALLBACK_LANG_PREFIX,
    CALLBACK_SETTINGS_LANG_PREFIX, CALLBACK_SETTINGS_SET_API_KEY,
    CALLBACK_SETTINGS_CHOOSE_MODEL_MENU, CALLBACK_SETTINGS_MODEL_PREFIX, CALLBACK_SETTINGS_BACK_TO_MAIN
)
from database import db_manager
from logger_config import get_logger
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
from . import localization as loc

logger = get_logger('markup_helpers')

def create_main_keyboard(lang_code: str) -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True) # –ò–ó–ú–ï–ù–ï–ù–û: row_width=3

    # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞—Å—Ö–æ–¥—ã" –∏ –º–µ–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
    buttons = [
        types.KeyboardButton(loc.get_text('btn_account', lang_code)),
        types.KeyboardButton(loc.get_text('btn_usage', lang_code)),
        types.KeyboardButton(loc.get_text('btn_settings', lang_code)),
        types.KeyboardButton(loc.get_text('btn_translate', lang_code)),
        types.KeyboardButton(loc.get_text('btn_history', lang_code)),
        types.KeyboardButton(loc.get_text('btn_reset', lang_code)),
        types.KeyboardButton(loc.get_text('btn_help', lang_code)),
    ]
    markup.add(*buttons)
    return markup


def create_language_selection_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ü–ï–†–ï–í–û–î–ê."""
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    sorted_languages = sorted(TRANSLATE_LANGUAGES.items(), key=lambda item: item[1])

    for lang_code, lang_name in sorted_languages:
        buttons.append(types.InlineKeyboardButton(lang_name, callback_data=f"{CALLBACK_LANG_PREFIX}{lang_code}"))

    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    return markup


def create_settings_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–∫–ª—é—á–∞—è —Å—Ç–∏–ª—å, —è–∑—ã–∫ –∏ API –∫–ª—é—á."""
    markup = types.InlineKeyboardMarkup(row_width=1)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_style = db_manager.get_user_bot_style(user_id)
    current_lang = db_manager.get_user_language(user_id)

    # --- –°–µ–∫—Ü–∏—è API –∫–ª—é—á–∞ ---
    markup.add(types.InlineKeyboardButton(loc.get_text('settings_api_key_section', current_lang), callback_data=CALLBACK_IGNORE))
    api_key_button = types.InlineKeyboardButton(
        loc.get_text('settings_btn_set_api_key', current_lang),
        callback_data=CALLBACK_SETTINGS_SET_API_KEY
    )
    markup.add(api_key_button)

    # --- –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ---
    markup.add(types.InlineKeyboardButton(loc.get_text('settings_model_section', current_lang), callback_data=CALLBACK_IGNORE))
    model_button = types.InlineKeyboardButton(
        loc.get_text('settings_btn_choose_model', current_lang),
        callback_data=CALLBACK_SETTINGS_CHOOSE_MODEL_MENU
    )
    markup.add(model_button)

    # --- –°–µ–∫—Ü–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è ---
    markup.add(types.InlineKeyboardButton(loc.get_text('settings_style_section', current_lang), callback_data=CALLBACK_IGNORE))
    style_buttons = []
    for style_code, style_name in BOT_STYLES.items():
        button_text = f"‚úÖ {style_name}" if style_code == current_style else style_name
        style_buttons.append(types.InlineKeyboardButton(button_text, callback_data=f'{CALLBACK_SETTINGS_STYLE_PREFIX}{style_code}'))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∏–ª–µ–π –ø–æ –¥–≤–µ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    style_rows = [style_buttons[i:i + 2] for i in range(0, len(style_buttons), 2)]
    for row in style_rows:
        markup.add(*row)

    # --- –°–µ–∫—Ü–∏—è —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
    markup.add(types.InlineKeyboardButton(loc.get_text('settings_language_section', current_lang), callback_data=CALLBACK_IGNORE))
    lang_buttons = [
        types.InlineKeyboardButton(f"{'‚úÖ ' if current_lang == 'ru' else ''}üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=f"{CALLBACK_SETTINGS_LANG_PREFIX}ru"),
        types.InlineKeyboardButton(f"{'‚úÖ ' if current_lang == 'en' else ''}üá∫üá∏ English", callback_data=f"{CALLBACK_SETTINGS_LANG_PREFIX}en")
    ]
    markup.add(*lang_buttons)

    return markup


def create_model_selection_keyboard(models: List[Dict[str, str]], current_model: Optional[str], lang_code: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Gemini."""
    markup = types.InlineKeyboardMarkup(row_width=1)

    for model in models:
        model_id = model['name']
        display_name = model['display_name']
        text = f"‚úÖ {display_name}" if model_id == current_model else display_name
        markup.add(types.InlineKeyboardButton(
            text,
            callback_data=f"{CALLBACK_SETTINGS_MODEL_PREFIX}{model_id}"
        ))

    markup.add(types.InlineKeyboardButton(
        loc.get_text('btn_back_to_settings', lang_code),
        callback_data=CALLBACK_SETTINGS_BACK_TO_MAIN
    ))
    return markup


def create_calendar_keyboard(year: Optional[int] = None, month: Optional[int] = None) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏."""
    now = datetime.datetime.now()
    year = year or now.year
    month = month or now.month
    markup = types.InlineKeyboardMarkup(row_width=7)

    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —Ç–∞–∫ –∫–∞–∫ locale –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        month_name = datetime.date(year, month, 1).strftime("%B %Y")
    except ValueError:
        year, month = now.year, now.month
        month_name = datetime.date(year, month, 1).strftime("%B %Y")

    markup.row(types.InlineKeyboardButton(month_name, callback_data=CALLBACK_IGNORE))
    days_of_week = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
    markup.row(*[types.InlineKeyboardButton(day, callback_data=CALLBACK_IGNORE) for day in days_of_week])

    try:
        first_day_of_month = datetime.date(year, month, 1)
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        if month == 12:
            last_day_of_month_day = 31
        else:
            last_day_of_month_day = (datetime.date(year, month + 1, 1) - datetime.timedelta(days=1)).day

        row_buttons = [types.InlineKeyboardButton(" ", callback_data=CALLBACK_IGNORE)] * first_day_of_month.weekday()

        for day_num in range(1, last_day_of_month_day + 1):
            current_date = datetime.date(year, month, day_num)
            callback_value = f"{CALLBACK_CALENDAR_DATE_PREFIX}{current_date.strftime('%Y-%m-%d')}"
            row_buttons.append(types.InlineKeyboardButton(str(day_num), callback_data=callback_value))

            if len(row_buttons) == 7:
                markup.row(*row_buttons)
                row_buttons = []

        if row_buttons:
            row_buttons.extend([types.InlineKeyboardButton(" ", callback_data=CALLBACK_IGNORE)] * (7 - len(row_buttons)))
            markup.row(*row_buttons)

    except ValueError as date_err:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {year}-{month}: {date_err}")

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
    prev_month_date = first_day_of_month - datetime.timedelta(days=1)
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    if month == 12:
        next_month_date = datetime.date(year + 1, 1, 1)
    else:
        next_month_date = datetime.date(year, month + 1, 1)

    nav_buttons = [
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"{CALLBACK_CALENDAR_MONTH_PREFIX}{prev_month_date.year}-{prev_month_date.month}"),
        types.InlineKeyboardButton(" ", callback_data=CALLBACK_IGNORE),
        types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"{CALLBACK_CALENDAR_MONTH_PREFIX}{next_month_date.year}-{next_month_date.month}")
    ]
    markup.row(*nav_buttons)
    return markup


def create_error_report_button() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ'."""
    markup = types.InlineKeyboardMarkup()
    btn_report_error = types.InlineKeyboardButton('üÜò –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ / Report Error', callback_data=CALLBACK_REPORT_ERROR)
    markup.add(btn_report_error)
    return markup
