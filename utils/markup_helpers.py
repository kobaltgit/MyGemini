# --- START OF FILE utils/markup_helpers.py ---
from telebot import types
import datetime
# import sqlite3 # <-- –£–±–∏—Ä–∞–µ–º, —Ç–∏–ø List[Dict[str, Any]] –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ db_manager
import pytz # <-- –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–∞–π–º–∑–æ–Ω
from typing import List, Optional, Dict, Any # <-- –î–æ–±–∞–≤–ª—è–µ–º Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
from config.settings import (
    BOT_STYLES, LANGUAGE_FLAGS,
    CALLBACK_SETTINGS_STYLE_PREFIX, CALLBACK_IGNORE,
    CALLBACK_CALENDAR_DATE_PREFIX, CALLBACK_CALENDAR_MONTH_PREFIX,
    CALLBACK_SET_REMINDER_PREFIX, # CALLBACK_VIEW_REMINDERS - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    CALLBACK_DELETE_REMINDER_PREFIX, CALLBACK_REPORT_ERROR,
    CALLBACK_LANG_PREFIX,
    # --- –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–∑–æ–Ω—ã ---
    CALLBACK_SETTINGS_SET_TIMEZONE_PREFIX, # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
    CALLBACK_SETTINGS_DETECT_TIMEZONE # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db_manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–∞–π–º–∑–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from database import db_manager
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
from logger_config import get_logger

logger = get_logger('markup_helpers')


def create_main_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False) # one_time_keyboard=False —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–∞—Å—å

    # –ö–Ω–æ–ø–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–±–∏—Ä–∞—Ç—å
    buttons = [
        types.KeyboardButton('üá∑üá∫ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏'),
        types.KeyboardButton('üìù –ò–∑–ª–æ–∂–∏—Ç—å'),
        types.KeyboardButton('üí∞ –ü–ª–∞–Ω –¥–æ—Ö–æ–¥–∞'),
        types.KeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è'),
        types.KeyboardButton('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'),
        types.KeyboardButton('üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'),
        types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'),
        types.KeyboardButton('üîÑ –°–±—Ä–æ—Å'),
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–∞–º–∏, –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ—á–µ—Ç–Ω–∞—è - –æ–¥–Ω–∞ –≤ —Ä—è–¥—É
    markup.add(*buttons) # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∞–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ row_width

    return markup

def create_language_selection_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞."""
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    sorted_languages = sorted(LANGUAGE_FLAGS.items(), key=lambda item: item[1])

    for lang_code, lang_name in sorted_languages:
        buttons.append(types.InlineKeyboardButton(lang_name, callback_data=f"{CALLBACK_LANG_PREFIX}{lang_code}"))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3]) # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å—Ä–µ–∑ –∫–Ω–æ–ø–æ–∫

    return markup

def create_settings_keyboard(user_id: int) -> types.InlineKeyboardMarkup: # –î–æ–±–∞–≤–∏–ª–∏ user_id
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–∫–ª—é—á–∞—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."""
    markup = types.InlineKeyboardMarkup(row_width=1) # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è –±–æ—Ç–∞ ---
    markup.add(types.InlineKeyboardButton("--- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ ---", callback_data=CALLBACK_IGNORE))

    style_buttons = []
    current_style = db_manager.get_user_bot_style(user_id) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å
    for style_code, style_name in BOT_STYLES.items():
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å
        button_text = f"‚úÖ {style_name}" if style_code == current_style else style_name
        style_buttons.append(types.InlineKeyboardButton(button_text, callback_data=f'{CALLBACK_SETTINGS_STYLE_PREFIX}{style_code}'))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∏–ª–µ–π –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(style_buttons), 2):
         if i + 1 < len(style_buttons):
             markup.add(style_buttons[i], style_buttons[i+1])
         else:
             markup.add(style_buttons[i])

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
    markup.add(types.InlineKeyboardButton("--- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ---", callback_data=CALLBACK_IGNORE))
    current_timezone = db_manager.get_user_timezone(user_id)
    if current_timezone:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—è—Å –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        markup.add(types.InlineKeyboardButton(f"–¢–µ–∫—É—â–∏–π: {current_timezone}", callback_data=CALLBACK_IGNORE))
        markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=CALLBACK_SETTINGS_SET_TIMEZONE_PREFIX))
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—è—Å
        markup.add(types.InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=CALLBACK_SETTINGS_SET_TIMEZONE_PREFIX))
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        markup.add(types.InlineKeyboardButton("üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data=CALLBACK_SETTINGS_DETECT_TIMEZONE))


    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—é–¥–∞, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è
    # markup.add(types.InlineKeyboardButton("--- –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---", callback_data=CALLBACK_IGNORE))
    # markup.add(types.InlineKeyboardButton("–î—Ä—É–≥–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="other_setting"))

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # markup.add(types.InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="back_to_main"))

    return markup


def create_calendar_keyboard(year: Optional[int] = None, month: Optional[int] = None, disable_past: bool = True) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.

    Args:
        year (Optional[int]): –ì–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π).
        month (Optional[int]): –ú–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π).
        disable_past (bool): –î–µ–ª–∞—Ç—å –ª–∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ (–¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π).
                               –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True. –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å False.
    """
    now = datetime.datetime.now()
    year = year or now.year
    month = month or now.month

    markup = types.InlineKeyboardMarkup(row_width=7)

    # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –ú–µ—Å—è—Ü –ì–æ–¥ ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ + –≥–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
    try:
        month_name = datetime.date(year, month, 1).strftime("%B %Y")
    except ValueError: # –ï—Å–ª–∏ –≥–æ–¥/–º–µ—Å—è—Ü –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥–æ–¥ ({year}) –∏–ª–∏ –º–µ—Å—è—Ü ({month}) –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ create_calendar_keyboard.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
        year, month = now.year, now.month
        month_name = datetime.date(year, month, 1).strftime("%B %Y")

    markup.row(types.InlineKeyboardButton(month_name, callback_data=CALLBACK_IGNORE))

    # --- –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
    days_of_week = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"] # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    markup.row(*[types.InlineKeyboardButton(day, callback_data=CALLBACK_IGNORE) for day in days_of_week])

    # --- –ö–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ ---
    try:
        first_day_of_month = datetime.date(year, month, 1)
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        if month == 12:
            last_day_of_month = datetime.date(year, 12, 31)
        else:
            last_day_of_month = datetime.date(year, month + 1, 1) - datetime.timedelta(days=1)

        # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        first_day_weekday = first_day_of_month.weekday() # 0 = –ü–Ω, 6 = –í—Å
        row_buttons = [types.InlineKeyboardButton(" ", callback_data=CALLBACK_IGNORE)] * first_day_weekday

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π
        for day_num in range(1, last_day_of_month.day + 1):
            current_date = datetime.date(year, month, day_num)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –¥–∞—Ç–∞
            is_selectable = True
            if disable_past and current_date < now.date():
                is_selectable = False

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ callback_data
            button_text = str(day_num)
            callback_value = f"{CALLBACK_CALENDAR_DATE_PREFIX}{current_date.strftime('%Y-%m-%d')}" if is_selectable else CALLBACK_IGNORE
            if not is_selectable:
                 button_text = f"¬∑{day_num}¬∑" # –ü–æ–º–µ—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ —Ç–æ—á–∫–∞–º–∏

            row_buttons.append(types.InlineKeyboardButton(button_text, callback_data=callback_value))

            # –ï—Å–ª–∏ —Ä—è–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω (7 –¥–Ω–µ–π), –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
            if len(row_buttons) == 7:
                markup.row(*row_buttons)
                row_buttons = []

        # –î–æ–±–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if row_buttons:
            row_buttons.extend([types.InlineKeyboardButton(" ", callback_data=CALLBACK_IGNORE)] * (7 - len(row_buttons)))
            markup.row(*row_buttons)

    except ValueError as date_err:
         logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {year}-{month}: {date_err}")
         markup.row(types.InlineKeyboardButton("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è", callback_data=CALLBACK_IGNORE))


    # --- –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º ---
    nav_buttons = []
    try:
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        prev_month_date = first_day_of_month - datetime.timedelta(days=1)
        # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        next_month_date = last_day_of_month + datetime.timedelta(days=1)

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (–µ—Å–ª–∏ disable_past=True)
        can_go_back = True
        if disable_past and (prev_month_date.year < now.year or (prev_month_date.year == now.year and prev_month_date.month < now.month)):
             can_go_back = False

        if can_go_back:
             nav_buttons.append(
                 types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CALLBACK_CALENDAR_MONTH_PREFIX}{prev_month_date.year}-{prev_month_date.month}")
             )
        else:
             nav_buttons.append(types.InlineKeyboardButton(" ", callback_data=CALLBACK_IGNORE)) # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è

        # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        nav_buttons.append(types.InlineKeyboardButton(" ", callback_data=CALLBACK_IGNORE))

        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü" (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
        nav_buttons.append(
             types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{CALLBACK_CALENDAR_MONTH_PREFIX}{next_month_date.year}-{next_month_date.month}")
        )
        markup.row(*nav_buttons)

    except Exception as nav_err:
         logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {nav_err}")

    return markup


def create_reminders_keyboard(reminders: List[Dict[str, Any]]) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"{CALLBACK_SET_REMINDER_PREFIX}new"))

    if reminders:
        markup.add(types.InlineKeyboardButton("--- –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---", callback_data=CALLBACK_IGNORE))
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ö–æ—Ç—è –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î)
        sorted_reminders = sorted(reminders, key=lambda r: r.get('reminder_time', ''))

        for reminder in sorted_reminders:
            try:
                reminder_id = reminder.get('reminder_id')
                reminder_text = reminder.get('reminder_text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
                reminder_time_str = reminder.get('reminder_time')

                if not reminder_id or not reminder_time_str:
                     logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ: {reminder}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                     continue

                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ ISO —Å—Ç—Ä–æ–∫–∏ UTC
                reminder_time_dt_utc = datetime.datetime.fromisoformat(reminder_time_str.replace('Z', '+00:00'))

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º UTC)
                time_str = reminder_time_dt_utc.strftime("%d.%m.%y %H:%M UTC")

                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                text_preview = reminder_text[:25] + '...' if len(reminder_text) > 25 else reminder_text

                markup.add(
                    types.InlineKeyboardButton(
                        f"üóëÔ∏è {time_str} - {text_preview}", # –ó–Ω–∞—á–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞–º–µ–∫–∞–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                        callback_data=f"{CALLBACK_DELETE_REMINDER_PREFIX}{reminder_id}"
                    )
                )
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                reminder_id_log = reminder.get('reminder_id', 'N/A')
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID {reminder_id_log} –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
                markup.add(types.InlineKeyboardButton(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID {reminder_id_log}", callback_data=CALLBACK_IGNORE))
    else:
        markup.add(types.InlineKeyboardButton("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", callback_data=CALLBACK_IGNORE))

    return markup


def create_timezone_request_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∑–æ–Ω—ã."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) # –°–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    button_location = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    markup.add(button_location)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
    markup.add(types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∞"))
    return markup


def create_error_report_button() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ'."""
    markup = types.InlineKeyboardMarkup()
    btn_report_error = types.InlineKeyboardButton('üÜò –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ', callback_data=CALLBACK_REPORT_ERROR)
    markup.add(btn_report_error)
    return markup

# --- END OF FILE utils/markup_helpers.py ---