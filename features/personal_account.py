# File: features/personal_account.py
from datetime import datetime
from typing import Optional, List, Dict, Any

from database.db_manager import (
    get_user_bot_style,
    get_conversation_count,
    get_first_interaction_date,
    get_conversation_history,
    get_user_language,
    get_user_api_key,
    get_user_persona # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
)
from config.settings import BOT_STYLES, BOT_PERSONAS # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω—ã
from utils.analysis_helpers import extract_frequent_topics
from services.gemini_service import generate_content_simple
from logger_config import get_logger

logger = get_logger(__name__, user_id='System')

USER_TITLES: Dict[int, str] = {
    0: "–ù–æ–≤–∏—á–æ–∫ / Newcomer", 100: "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å / Active User", 500: "–í–µ—Ç–µ—Ä–∞–Ω —á–∞—Ç–∞ / Chat Veteran",
    1000: "–ú–∞—Å—Ç–µ—Ä –æ–±—â–µ–Ω–∏—è / Master of Conversation", 5000: "–õ–µ–≥–µ–Ω–¥–∞ / Legend",
}

def _get_user_title(message_count: int) -> str:
    title: str = USER_TITLES[0]
    for messages, current_title in sorted(USER_TITLES.items(), reverse=True):
        if message_count >= messages:
            title = current_title
            break
    return title

def _get_days_since_start(first_interaction_date_str: Optional[str]) -> str:
    if not first_interaction_date_str:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ / Unknown"
    try:
        first_interaction_date = datetime.strptime(first_interaction_date_str, '%Y-%m-%d').date()
        days: int = (datetime.now().date() - first_interaction_date).days
        return str(max(0, days))
    except ValueError:
        return "–û—à–∏–±–∫–∞ / Error"

async def _get_topic_description(user_id: int, api_key: str) -> str:
    try:
        conversation_history_raw = get_conversation_history(user_id, limit=50)
        if not conversation_history_raw:
             return "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. / Not enough data for analysis yet."
        frequent_topics = extract_frequent_topics(conversation_history_raw, top_n=7)
        if not frequent_topics:
            return "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. / Not enough data for analysis yet."

        topics_str = ', '.join(frequent_topics)
        prompt = f"""Analyze the following keywords from a user's conversation with a chatbot: {topics_str}.
Briefly (in 1-2 sentences in Russian) describe the main topics the user discusses. Make the description generalized and positive.
Start the response with '–ß–∞—â–µ –≤—Å–µ–≥–æ –≤—ã –æ–±—Å—É–∂–¥–∞–µ—Ç–µ' or a similar phrase."""

        ai_description = await generate_content_simple(api_key, prompt)

        if ai_description:
            return ai_description.strip()
        else:
            return f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö: {topics_str} / Keywords in your queries: {topics_str}"

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–º –¥–ª—è user_id {user_id}: {e}", extra={'user_id': str(user_id)})
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—ã (–æ—à–∏–±–∫–∞). / Could not determine topics (error)."

async def get_personal_account_info(user_id: int) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    bot_style_code = get_user_bot_style(user_id)
    conversation_count = get_conversation_count(user_id)
    first_interaction_date_str = get_first_interaction_date(user_id)
    user_lang = get_user_language(user_id)
    user_api_key = get_user_api_key(user_id)
    persona_id = get_user_persona(user_id) # <-- –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä—Å–æ–Ω—ã

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    title: str = _get_user_title(conversation_count)
    days_active: str = _get_days_since_start(first_interaction_date_str)
    style_name: str = BOT_STYLES.get(bot_style_code, BOT_STYLES['default'])

    # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    persona_info = BOT_PERSONAS.get(persona_id, BOT_PERSONAS['default'])
    persona_name = persona_info.get(f"name_{user_lang}", persona_info['name_ru'])

    api_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω / Set" if user_api_key else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω / Not Set"

    topics_description = "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω API –∫–ª—é—á / API key required for analysis"
    if user_api_key:
        topics_description = await _get_topic_description(user_id, user_api_key)

    # –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω—ã
    info_text = f"""
üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç / My Account* üë§

üèÜ *–ó–≤–∞–Ω–∏–µ / Title:* {title}
üí¨ *–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π / Total messages:* {conversation_count}
üóìÔ∏è *–í—ã —Å –Ω–∞–º–∏ (–¥–Ω–µ–π) / You are with us (days):* {days_active}

--- *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ / Settings* ---
üé≠ *–¢–µ–∫—É—â–∞—è –ø–µ—Ä—Å–æ–Ω–∞ / Persona:* {persona_name}
üé® *–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è / Bot Style:* {style_name}
üåê *–Ø–∑—ã–∫ / Language:* {"–†—É—Å—Å–∫–∏–π" if user_lang == 'ru' else "English"}
üîë *API –ö–ª—é—á / API Key:* {api_key_status}

--- *–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ / Conversation Analysis* ---
üó£Ô∏è {topics_description}
"""
    return "\n".join(line.strip() for line in info_text.strip().splitlines())
